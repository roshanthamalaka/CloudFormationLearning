AWSTemplateFormatVersion: 2010-09-09
Description: Example Template which will provision server environment
Mappings:  # Map Variable Defined to Store AMID for each region
    AmazonLinuxAMIDMap: 
        us-east1: 
            ImageID: ami-0c614dee691cbbf37  
        ap-southeast-2: 
            ImageID: ami-07ba57196a766fc6d 
Resources: 
 HubPubSvrSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Allow SSH From Anywhere for dev purpose
    VpcId: !ImportValue HubVPCID 
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 0 
        ToPort: 65535 # Allow all port 
        CidrIp: 0.0.0.0/0
    Tags: 
        - Key: Name
          Value: HubPublicSvrSG
 HubPrivSvrSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Allow within VPC for dev purpose
    VpcId: !ImportValue HubVPCID 
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 172.16.0.0/16
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 0 
        ToPort: 65535 # Allow all port 
        CidrIp: 0.0.0.0/0
    Tags: 
        - Key: Name
          Value: HubPrivateSvrSG
 SpokePrivSvrSG:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Allow within VPC for dev purpose in Spoke VPC
    VpcId: !ImportValue SpokeVPCID 
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 192.168.0.0/16
    SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 0 
        ToPort: 65535 # Allow all port 
        CidrIp: 0.0.0.0/0
    Tags: 
        - Key: Name
          Value: SpokePrivateSvrSG
 DemoKeyPair:
    Type: 'AWS::EC2::KeyPair'  # This option create new key pair.We can Import our own key as well. Refer keypair resource doc https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-keypair.html
    Properties: 
      KeyName: demo-key
 hubpublicserver:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: !FindInMap [AmazonLinuxAMIDMap, !Ref "AWS::Region",ImageID] # Get the respect AMI ID using FindInMap Intrinsic function
        InstanceType: t2.micro
        KeyName: !Ref DemoKeyPair
        SecurityGroupIds: 
            - !Ref HubPubSvrSG
        SubnetId: !ImportValue HubVPCPublicSubnetID
        Tags:
            - Key: Name
              Value: HubPubliServer
 hubprivateserver:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: !FindInMap [AmazonLinuxAMIDMap, !Ref "AWS::Region",ImageID] # Get the respect AMI ID using FindInMap Intrinsic function
        InstanceType: t2.micro
        KeyName: !Ref DemoKeyPair
        SecurityGroupIds: 
            - !Ref HubPrivSvrSG
        SubnetId: !ImportValue HubVPCPrivateSubnetID
        Tags:
            - Key: Name
              Value: HubPrivServer
 spokeprivateserver:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: !FindInMap [AmazonLinuxAMIDMap, !Ref "AWS::Region",ImageID] # Get the respect AMI ID using FindInMap Intrinsic function
        InstanceType: t2.micro
        KeyName: !Ref DemoKeyPair
        SecurityGroupIds: 
            - !Ref SpokePrivSvrSG
        SubnetId: !ImportValue SpokeVPCPrivateSubnetID
        Tags:
            - Key: Name
              Value: SpokePrivServer




 hubPubSvrEIP:
    Type: AWS::EC2::EIP # Create Elastic IP and associate it with the server
    Properties:
      InstanceId: !Ref hubpublicserver 
