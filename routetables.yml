AWSTemplateFormatVersion: 2010-09-09
Description: Example Template which will deploy Route Tables for Hub Spoke VPC Subnets and their Routes
Resources: 
  HubPublicRouteTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !ImportValue HubVPCID
      Tags:
      - Key: Name
        Value: HubPublicRouteTable
  HubPrivateRouteTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !ImportValue HubVPCID
      Tags:
      - Key: Name
        Value: HubPrivateRouteTable
  SpokePublicRouteTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !ImportValue SpokeVPCID
      Tags:
      - Key: Name
        Value: SpokePublicRouteTable
  SpokePrivateRouteTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !ImportValue SpokeVPCID
      Tags:
      - Key: Name
        Value: SpokePrivateRouteTable
  HubPublicDefaultRoute: # Create Route Table entry for Public Subnet to route traffic via Internet Gateway
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !ImportValue HubIGWID # Use GatewayId if it is Internet Gateway of Virtual Private Gateway
      RouteTableId: !Ref HubPublicRouteTB
  HubPrivateDefaultRoute: # Create Route Table entry for Private Subnet to route traffic via NAT Gateway
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !ImportValue HubNGWID
      RouteTableId: !Ref HubPrivateRouteTB
  HubToSpokeRoutePubicRTB: # Create Route Table entry on Hub vpc public subnet attach route table, to route traffic to spoke vpc via peering connection
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 192.168.0.0/16
      VpcPeeringConnectionId: !ImportValue HubToSpokePeeringID
      RouteTableId: !Ref HubPublicRouteTB
  HubToSpokeRoutePvtRTB: # Create Route Table entry on Hub vpc private subnet attach route table, to route traffic to spoke vpc via peering connection
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 192.168.0.0/16
      VpcPeeringConnectionId: !ImportValue HubToSpokePeeringID
      RouteTableId: !Ref HubPrivateRouteTB
  SpokePublicDefaultRoute: # Create Route Table entry for Public Subnet of spoke to route traffic via Internet Gateway
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !ImportValue SpokeIGWID
      RouteTableId: !Ref SpokePublicRouteTB
  SpokePrivateDefaultRoute: # Create Route Table entry for Public Subnet of spoke to route traffic via Internet Gateway
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !ImportValue SpokeNGWID
      RouteTableId: !Ref SpokePrivateRouteTB
  SpokeToHubRoutePubicRTB: # Create Route Table entry on Spoke vpc public subnet attach route table, to route traffic to hub vpc via peering connection
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 172.16.0.0/16
      VpcPeeringConnectionId: !ImportValue HubToSpokePeeringID
      RouteTableId: !Ref SpokePublicRouteTB
  SpokeToHubRoutePrivateRTB: # Create Route Table entry on Spoke vpc private subnet attach route table, to route traffic to hub vpc via peering connection
    Type: AWS::EC2::Route
    Properties:  
      DestinationCidrBlock: 172.16.0.0/16
      VpcPeeringConnectionId: !ImportValue HubToSpokePeeringID
      RouteTableId: !Ref SpokePrivateRouteTB
        

Outputs:
    HubPublicRouteTBID: 
        Description: Hub Public Route Table 
        Value: !Ref HubPublicRouteTB # Logical ID/Name of Route Table is passed so Route Table id is returned to Value parameter
        Export:
            Name: HubPublicRouteTBID
    HubPrivateRouteTBID: 
        Description: Hub Public Route Table 
        Value: !Ref HubPrivateRouteTB
        Export:
            Name: HubPrivateRouteTBID
    SpokePublicRouteTBID: 
        Description: Hub Public Route Table 
        Value: !Ref SpokePublicRouteTB # Logical ID/Name of Route Table is passed so Route Table id is returned to Value parameter
        Export:
            Name: SpokePublicRouteTBID
    SpokePrivateRouteTBID: 
        Description: Hub Public Route Table 
        Value: !Ref SpokePrivateRouteTB # Logical ID/Name of Route Table is passed so Route Table id is returned to Value parameter
        Export:
            Name: SpokePrivateRouteTBID